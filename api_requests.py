import requests
from typing import Optional, Dict, Any
import json
import os
import streamlit as st
import logging

# Configura√ß√£o do logger para imprimir logs no terminal
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def load_api_key() -> Optional[str]:
    """
    Carrega a chave da API do arquivo .streamlit/secrets.toml.

    Retorna:
    Optional[str]: A chave da API se encontrada, caso contr√°rio None.
    """
    try:
        api_key = st.secrets.get("groq_api_key")
        if api_key:
            st.success("‚úÖ API key carregada com sucesso")
            logger.info("API key carregada com sucesso.")
            return api_key
        else:
            st.error("‚ùå API key n√£o encontrada")
            logger.warning("API key n√£o encontrada.")
            return None
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar API key: {e}")
        logger.error(f"Erro ao carregar API key: {e}")
        return None

def call_api(prompt: str) -> Optional[str]:
    """
    Processa o prompt usando a API Groq e retorna um plano gen√©rico em caso de falha.

    Par√¢metros:
    prompt (str): O prompt a ser processado.

    Retorna:
    Optional[str]: A resposta da API ou um plano gen√©rico em caso de falha.
    """
    try:
        api_key = load_api_key()
        if not api_key:
            logger.error("API key n√£o dispon√≠vel. Abandonando chamada √† API.")
            return generate_generic_plan()

        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "model": "llama2-70b-4096",
            "messages": [
                {
                    "role": "system",
                    "content": "Voc√™ √© um especialista em educa√ß√£o, focado em criar planos de aula detalhados e personalizados."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.7,
            "max_tokens": 4096
        }

        st.info("üîÑ Enviando requisi√ß√£o para API Groq...")
        logger.info("Enviando requisi√ß√£o para a API Groq com o seguinte payload:")
        logger.info(json.dumps(data, indent=2, ensure_ascii=False))

        response = requests.post(
            "https://api.groq.com/openai/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=30
        )

        logger.info(f"Status da resposta da API: {response.status_code}")
        logger.info(f"Resposta bruta da API: {response.text}")

        if response.status_code == 200:
            try:
                result = response.json()
                logger.info(f"Resposta JSON da API: {json.dumps(result, indent=2, ensure_ascii=False)}")
                content = result["choices"][0]["message"]["content"]
                st.success("‚úÖ Resposta da API recebida com sucesso")
                return content
            except (KeyError, IndexError, json.JSONDecodeError) as parse_error:
                st.error("‚ùå Erro ao processar a estrutura da resposta da API.")
                logger.error(f"Erro ao processar a estrutura da resposta da API: {parse_error}")
                return generate_generic_plan()
        elif response.status_code == 429:
            st.error("‚ùå Limite de requisi√ß√µes da API foi atingido. Tente novamente mais tarde.")
            logger.error("Limite de requisi√ß√µes da API atingido. Verifique a quota dispon√≠vel.")
        elif response.status_code == 401:
            st.error("‚ùå Falha de autentica√ß√£o. Verifique a chave da API.")
            logger.error("Falha de autentica√ß√£o. Verifique a chave da API.")
        elif response.status_code == 500:
            st.error("‚ùå Erro interno do servidor da API. Tente novamente mais tarde.")
            logger.error("Erro interno do servidor da API.")
        else:
            st.error(f"‚ùå Erro na API: {response.status_code}")
            st.error(f"Detalhes da resposta da API: {response.text}")
            logger.error(f"Erro na API: {response.status_code} - Detalhes: {response.text}")

        return generate_generic_plan()

    except requests.exceptions.Timeout:
        st.error("‚è±Ô∏è Timeout na requisi√ß√£o √† API")
        logger.error("Timeout na requisi√ß√£o √† API.")
        return generate_generic_plan()
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå Erro na requisi√ß√£o: {e}")
        logger.error(f"Erro na requisi√ß√£o: {e}")
        return generate_generic_plan()
    except Exception as e:
        st.error(f"‚ùå Erro inesperado: {e}")
        logger.error(f"Erro inesperado: {e}")
        return generate_generic_plan()

def generate_generic_plan() -> str:
    """
    Gera um plano de aula gen√©rico formatado para exibi√ß√£o.

    Retorna:
    str: Um plano de aula gen√©rico formatado.
    """
    logger.warning("Retornando plano de aula gen√©rico devido a erro.")
    return """
    # Plano de Aula Gen√©rico

    ## Informa√ß√µes Gerais üìã
    - **Dura√ß√£o Total:** 40 minutos
    - **Componente Curricular:** [Componente]
    - **Unidade Tem√°tica:** [Unidade Tem√°tica]
    - **Objetivo de Conhecimento:** [Objetivo de Conhecimento]

    ## Objetivo Geral üéØ
    Fornecer uma introdu√ß√£o geral ao tema abordado.

    ## Etapas da Aula ‚è±Ô∏è
    ### 1. Abertura e Sensibiliza√ß√£o (10 minutos)
    - **Atividade:** Introdu√ß√£o ao tema com discuss√£o breve.
    - **Objetivo:** Engajar os alunos no assunto.

    ### 2. Desenvolvimento Principal (20 minutos)
    - **Atividade:** Explica√ß√£o detalhada e pr√°tica guiada.
    - **Objetivo:** Promover a compreens√£o e participa√ß√£o ativa dos alunos.

    ### 3. Fechamento e Avalia√ß√£o (10 minutos)
    - **Atividade:** Revis√£o e perguntas finais.
    - **Objetivo:** Consolidar o aprendizado e avaliar a compreens√£o.

    ## Materiais Necess√°rios üìö
    - Material did√°tico b√°sico
    - Quadro branco e marcadores

    ## Avalia√ß√£o e Acompanhamento üìä
    - Observa√ß√£o direta e registro do progresso dos alunos.
    """

def fetch_activity(componente: str, unidade_tematica: str, objetivo_conhecimento: str) -> Optional[str]:
    """
    Gera um prompt com base nos par√¢metros fornecidos para processar a atividade.

    Par√¢metros:
    componente (str): O componente curricular.
    unidade_tematica (str): A unidade tem√°tica.
    objetivo_conhecimento (str): O objetivo de conhecimento.

    Retorna:
    Optional[str]: O prompt gerado ou None em caso de falha.
    """
    try:
        prompt = f"""
        # Plano de Aula Personalizado

        ## Informa√ß√µes B√°sicas
        - Componente: {componente}
        - Unidade Tem√°tica: {unidade_tematica}
        - Objetivo de Conhecimento: {objetivo_conhecimento}

        Crie um plano de aula detalhado com as seguintes se√ß√µes:
        1. Dura√ß√£o total e por atividade
        2. Objetivo geral e espec√≠ficos
        3. Desenvolvimento da aula (in√≠cio, meio e fim)
        4. Estrat√©gias diferenciadas por n√≠vel
        5. Materiais necess√°rios
        6. Avalia√ß√£o e acompanhamento
        """
        st.success("‚úÖ Prompt gerado com sucesso")
        logger.info(f"Prompt gerado com sucesso: {prompt}")
        return prompt
    except Exception as e:
        st.error(f"‚ùå Erro ao gerar prompt: {e}")
        logger.error(f"Erro ao gerar prompt: {e}")
        return None
