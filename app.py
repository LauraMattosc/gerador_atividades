import streamlit as st
from api_requests import fetch_activity, process_with_groq

# Configura√ß√£o da interface do Streamlit
def configure_ui():
    """Configura a interface do usu√°rio usando o Streamlit."""
    st.title('üßÆ Gerador de Atividades')
    st.write('Este aplicativo cria atividades pr√°ticas e envolventes.')

# Entradas principais do usu√°rio
def get_user_inputs():
    """Captura as entradas de dados do usu√°rio.

    Retorna:
    tuple: Contendo as credenciais da API, tema e n√≠vel de dificuldade.
    """
    # Entrada de token de autentica√ß√£o para a API principal
    api_token = st.text_input("üîë Insira seu token de autentica√ß√£o da API principal:", type="password")
    # Entrada de chave de autentica√ß√£o para a API Groq
    groq_api_key = st.text_input("üîê Insira sua chave API do Groq:", type="password")
    # Sele√ß√£o do tema da atividade
    tema = st.selectbox("üìö Escolha o tema da atividade:", ["Hist√≥rias Curtas", "Completar Palavras", "S√≠labas", "Rimas", "Leitura de Palavras"])
    # Sele√ß√£o do n√≠vel de dificuldade
    nivel_dificuldade = st.selectbox("üéöÔ∏è Selecione o n√≠vel de dificuldade:", ["F√°cil", "M√©dio", "Dif√≠cil"]) 
    return api_token, groq_api_key, tema, nivel_dificuldade

# Fun√ß√£o principal para lidar com a l√≥gica do aplicativo
def main():
    configure_ui()
    api_token, groq_api_key, tema, nivel_dificuldade = get_user_inputs()

    # Verifica se o bot√£o foi pressionado
    if st.button("Gerar Atividade"):
        # Verifica se as credenciais foram fornecidas
        if api_token and groq_api_key:
            st.info("üöÄ Gerando a atividade, por favor, aguarde...")
            # Faz a requisi√ß√£o para obter o texto da atividade
            atividade_texto = fetch_activity(api_token, tema, nivel_dificuldade)

            # Verifica se a requisi√ß√£o foi bem-sucedida
            if atividade_texto:
                st.success("‚úÖ Requisi√ß√£o √† API principal bem-sucedida.")
                print("Status: Atividade gerada com sucesso da API principal.")  # Status para debug

                # Processa o texto com a API Groq
                resposta_final = process_with_groq(groq_api_key, atividade_texto)

                # Verifica se a resposta final foi gerada com sucesso
                if resposta_final:
                    print("Status: Atividade processada com sucesso pela API Groq.")  # Status para debug
                    st.markdown(
                        f"""
                        <div style="background-color:#f0f8ff; padding:15px; border-radius:10px;">
                        <h3 style="color:#2a9d8f;">üìù Resultado da Atividade:</h3>
                        <p style="font-size:16px; color:#264653;">{resposta_final}</p>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
                else:
                    print("Status: Falha ao processar a atividade com a API Groq.")  # Status de falha
                    st.error("‚ùå Erro ao processar a atividade com a API Groq.")
            else:
                print("Status: Erro na requisi√ß√£o √† API principal.")  # Status de erro
                st.error("‚ùå Erro ao fazer a requisi√ß√£o √† API principal. Verifique as credenciais e tente novamente.")
        else:
            print("Status: Credenciais n√£o fornecidas.")  # Status de aviso
            st.warning("‚ö†Ô∏è Por favor, insira as credenciais da API para continuar.")

if __name__ == "__main__":
    main()
